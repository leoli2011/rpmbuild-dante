--- example/sockd.conf	2014-09-03 22:49:13.000000000 +0800
+++ /tmp/private_server/sockd.conf	2016-06-30 19:36:12.000000000 +0800
@@ -40,17 +40,35 @@
 
 # the server will log both via syslog, to stdout and to /var/log/sockd.log
 #logoutput: syslog stdout /var/log/sockd.log
-logoutput: stderr
+#logoutput: stderr /var/log/sockd.log
+logoutput: /var/log/sockd.log
+#logoutput: stdout /var/log/sockd.log
+#debug: 2
+#logoutput: stderr
 
 # The server will bind to the address 10.1.1.1, port 1080 and will only
 # accept connections going to that address.
 #internal: 10.1.1.1 port = 1080
 # Alternatively, the interface name can be used instead of the address.
-#internal: eth0 port = 1080
+#internal: 0.0.0.0 port = 80
+#internal: 14.152.77.246 port = 80
+#internal: 122.13.20.246 port = 80
+#internal: 183.232.229.244 port = 80
+
+#internal: eth1 port = 80
+#internal: eth2 port = 80
+#internal: eth3 port = 80
+internal: 0.0.0.0 port = 9006
 
 # all outgoing connections from the server will use the IP address
 # 195.168.1.1
-#external: 192.168.1.1
+external: eth3
+#external: eth1
+#external: eth2
+#external: eth3
+#external: 14.152.77.246
+#external: 122.13.20.246
+#external: 183.232.229.244
 
 # list over acceptable authentication methods, order of preference.
 # An authentication method not set here will never be selected.
@@ -60,10 +78,11 @@
 #
 
 # methods for socks-rules.
-#socksmethod: username none #rfc931
+#socksmethod: username none 
+socksmethod: none
 
 # methods for client-rules.
-#clientmethod: none
+clientmethod: none
 
 #or if you want to allow rfc931 (ident) too
 #socksmethod: username rfc931 none
@@ -161,10 +180,19 @@
 #
 
 # Allow our clients, also provides an example of the port range command.
-#client pass {
-#        from: 10.0.0.0/8 port 1-65535 to: 0.0.0.0/0
-#        clientmethod: rfc931 # match all idented users that also are in passwordfile
-#}
+client pass {
+        from: 0.0.0.0/0 port 1-65535 to: 0.0.0.0/0
+        clientmethod: none
+}
+
+monitor {
+   from: 0.0.0.0/0 to: 0.0.0.0/0 port 1-65535
+      protocol: tcp
+      external.alarm.data.recv: 1 in 10
+      internal.alarm.data.send: 1 in 10
+      internal.alarm.disconnect: 1/3 in 10
+      external.alarm.disconnect: 1/3 in 10
+}
 
 # This is identical to above, but allows clients without a rfc931 (ident)
 # too.  In practice this means the socks server will try to get a rfc931
@@ -214,11 +242,11 @@
 # should usually by from "0.0.0.0/0", i.e if a client of yours
 # has permission to bind, it will also have permission to accept
 # the reply from anywhere.
-#socks pass {
-#        from: 10.0.0.0/8 to: 0.0.0.0/0
-#        command: bind
-#        log: connect error
-#}
+socks pass {
+        from: 0.0.0.0/0 to: 0.0.0.0/0
+        command: bind connect udpassociate
+        log: connect error
+}
 
 # some connections expect some sort of "reply", this might be
 # the reply to a bind request or it may be the reply to a
@@ -226,11 +254,11 @@
 # Note that nothing is done to verify that it's a "genuine" reply,
 # that is in general not possible anyway.  The below will allow
 # all "replies" in to your clients at the 10.0.0.0/8 net.
-#socks pass {
-#        from: 0.0.0.0/0 to: 10.0.0.0/8
-#        command: bindreply udpreply
-#        log: connect error
-#}
+socks pass {
+        from: 0.0.0.0/0 to: 0.0.0.0/0
+        command: bindreply udpreply
+        log: connect error
+}
 
 
 # pass any http connects to the example.com domain if they
