diff -Npru dante-1.4.1/sockd/monitor.c /tmp/private_server/sockd/monitor.c
--- dante-1.4.1/sockd/monitor.c	2014-08-24 19:41:34.000000000 +0800
+++ /tmp/private_server/sockd/monitor.c	2016-07-21 16:32:39.000000000 +0800
@@ -41,13 +41,26 @@
  *
  */
 
+#include "curl/curl.h"
+#include "json-c/json.h"
 #include "common.h"
 #include "monitor.h"
 #include "config_parse.h"
+#include "netlink/netlink.h"
+#include "netlink/route/link.h"
 
 static const char rcsid[] =
 "$Id: monitor.c,v 1.125.4.8 2014/08/24 11:41:34 karls Exp $";
 
+typedef struct stats_info_t {
+    char ifname[IFNAMSIZ];
+    struct in_addr addr;
+    uint64_t tx;
+    uint64_t rx;
+    uint64_t last_tx;
+    uint64_t last_rx;
+} stats_info;
+
 
 static void showalarms(const monitor_if_t *iface);
 static void siginfo(int sig, siginfo_t *sip, void *scp);
@@ -71,6 +84,8 @@ alarmcheck_disconnect(const monitor_t *m
 #define OP_DISCONNECT      (2)
 #define OP_REMOVE_SESSION  (4)
 
+#define IP_PORT "http://127.0.0.1:9004"
+
 static char *op2string(const size_t op);
 
 
@@ -78,7 +93,7 @@ static void
 disconnect_alarm_body(const int weclosedfirst, const size_t op,
                       rule_t *alarm, const size_t sides,
                       const clientinfo_t *cinfo,
-                      const char *reason, const int lock);
+                      const char *reason, const int lock, const sockd_io_t *io);
 /*
  * The operation for the different op values is given by the "op" value,
  * which should be a bitmask of one or more of the following.:
@@ -151,11 +166,18 @@ static void proctitleupdate(void);
  * we are monitoring.
  */
 
+static int doupdate(char *url, int type, monitor_t *monitor);
+
 static struct {
    size_t         alarmsactive;    /* number of alarms currently active.      */
    size_t         monitorc;        /* number of monitors we are monitoring.   */
 } state;
 
+enum st_update_type {
+	ST_USERINFO,
+	ST_CARDINFO,
+};
+
 monitor_t *
 addmonitor(newmonitor)
    const monitor_t *newmonitor;
@@ -424,6 +446,8 @@ run_monitor(void)
 
    sockd_print_child_ready_message((size_t)freedescriptors(NULL, NULL));
 
+   doreporter();
+
    while (1) {
       struct timeval timeout;
       int fdbits;
@@ -622,7 +646,7 @@ alarm_inherit(from, cinfo_from, to, cinf
          /*
           * Add connect.
           */
-         alarm_add_connect(to, sidesconnected, cinfo_to, sockscf.shmemfd);
+         alarm_add_connect(to, sidesconnected, cinfo_to, sockscf.shmemfd, 0);
 
       /* else; nothing to do.  No monitor before, no monitor now. */
    }
@@ -645,12 +669,12 @@ alarm_inherit(from, cinfo_from, to, cinf
             alarm_remove_session(from,
                                  sidesconnected,
                                  cinfo_from,
-                                 sockscf.shmemfd);
+                                 sockscf.shmemfd, 0);
          }
 
          SASSERTX(to->mstats_shmid != 0);
          if (to->alarmsconfigured & ALARM_DISCONNECT)
-            alarm_add_connect(to, sidesconnected, cinfo_to, sockscf.shmemfd);
+            alarm_add_connect(to, sidesconnected, cinfo_to, sockscf.shmemfd, 0);
       }
    }
 }
@@ -791,7 +815,7 @@ monitor_move(oldmonitor, newmonitor, sta
       socks_lock(lock, (off_t)alarm.mstats_shmid, 1, 1, 1);
 
       if (alarm.alarmsconfigured & ALARM_DISCONNECT)
-         alarm_remove_session(&alarm, sidesconnected, cinfo, -1);
+         alarm_remove_session(&alarm, sidesconnected, cinfo, -1, 0);
 
       monitor_unuse(alarm.mstats, cinfo, -1);
 
@@ -828,7 +852,7 @@ monitor_move(oldmonitor, newmonitor, sta
       monitor_use(alarm.mstats, cinfo, -1);
 
       if (alarm.alarmsconfigured & ALARM_DISCONNECT)
-         alarm_add_connect(&alarm, sidesconnected, cinfo, -1);
+         alarm_add_connect(&alarm, sidesconnected, cinfo, -1, 0);
 
       socks_unlock(lock, (off_t)alarm.mstats_shmid, 1);
 
@@ -871,11 +895,12 @@ monitor_unuse(mstats, cinfo, lock)
 }
 
 void
-alarm_remove_session(alarm, sides, cinfo, lock)
+alarm_remove_session(alarm, sides, cinfo, lock, io)
    rule_t *alarm;
    const size_t sides;
    const clientinfo_t *cinfo;
    const int lock;
+   const sockd_io_t *io;
 {
 
    disconnect_alarm_body(0,
@@ -884,15 +909,16 @@ alarm_remove_session(alarm, sides, cinfo
                          sides,
                          cinfo,
                          NULL,
-                         lock);
+                         lock, io);
 }
 
 void
-alarm_add_connect(alarm, sides, cinfo, lock)
+alarm_add_connect(alarm, sides, cinfo, lock, io)
    rule_t *alarm;
    const size_t sides;
    const clientinfo_t *cinfo;
    const int lock;
+   const sockd_io_t *io;
 {
 
    disconnect_alarm_body(0,
@@ -901,17 +927,18 @@ alarm_add_connect(alarm, sides, cinfo, l
                          sides,
                          cinfo,
                          NULL,
-                         lock);
+                         lock, io);
 }
 
 void
-alarm_add_disconnect(weclosedfirst, alarm, sides, cinfo, reason, lock)
+alarm_add_disconnect(weclosedfirst, alarm, sides, cinfo, reason, lock, io)
    const int weclosedfirst;
    rule_t *alarm;
    const size_t sides;
    const clientinfo_t *cinfo;
    const char *reason;
    const int lock;
+   const sockd_io_t *io;
 {
 
    SASSERTX(reason != NULL);
@@ -921,11 +948,11 @@ alarm_add_disconnect(weclosedfirst, alar
                          sides,
                          cinfo,
                          reason,
-                         lock);
+                         lock, io);
 }
 
 static void
-disconnect_alarm_body(weclosedfirst, op, alarm, sides, cinfo, reason, lock)
+disconnect_alarm_body(weclosedfirst, op, alarm, sides, cinfo, reason, lock, io)
    const int weclosedfirst;
    const size_t op;
    rule_t *alarm;
@@ -933,6 +960,7 @@ disconnect_alarm_body(weclosedfirst, op,
    const clientinfo_t *cinfo;
    const char *reason;
    const int lock;
+   const sockd_io_t *io;
 {
    const char *function = "disconnect_alarm_body()";
    const size_t sidev[] = { sides & ALARM_INTERNAL ? ALARM_INTERNAL : 0,
@@ -971,6 +999,27 @@ disconnect_alarm_body(weclosedfirst, op,
    shmem_object_t _shmem = *alarm->mstats;
 #endif /* DEBUG */
 
+   user_info_t *uif = &alarm->mstats->object.monitor.user_info;
+   int i;
+   int rc = -1;
+   int uuid = 0;
+   int len = sizeof(int);
+
+   if (io) {
+      rc = getsockopt(io->src.s, IPPROTO_TCP, MPTCP_AUTH_UUID, &uuid, &len);
+      slog(LOG_ALARM, "%s alarm_connect: rc=%d %s, uid=%x\n", __func__, rc, strerror(errno), uuid);
+   }
+
+   if (uif) {
+      for (i = 0; i < uif->user_cnt; i++) {
+          if (uuid != 0 && uif->alarm[i].uid == uuid) {
+              slog(LOG_ALARM, "alarm_connect########## uif=%p, uid=%x, alarm->uid=%x , i=%d, user_cnt=%d ",
+                      uif, uuid, uif->alarm[i].uid, i, uif->user_cnt);
+              break;
+          }
+      }
+   }
+
    locktaken = 0;
 
    for (opc = 0; opc < ELEMENTS(opv); ++opc) {
@@ -1022,6 +1071,20 @@ disconnect_alarm_body(weclosedfirst, op,
                SASSERTX(reason == NULL);
 
                disconnect->sessionc += 1;
+               if (uif && io) {
+                    int j;
+                    uif->alarm[i].sess_cnt +=1;
+                    for (j = 0; j < 10; j++) {
+                        if (!uif->alarm[i].dip[j]) {
+                            break;
+                        }
+                    }
+
+                    uif->alarm[i].dip[j%10] = TOIN(&io->dst.raddr)->sin_addr.s_addr;
+                    //struct in_addr test;
+                    //test.s_addr = uif->alarm[i].dip[j];
+     	            //slog(LOG_ALARM, "#### add dip j=%d ip=%s\n", j, inet_ntoa(test));
+               }
                break;
 
             case OP_DISCONNECT:
@@ -1029,6 +1092,9 @@ disconnect_alarm_body(weclosedfirst, op,
                SASSERTX(disconnect->sessionc > 0);
 
                disconnect->sessionc -= 1;
+               if (uif && io) {
+                   uif ? uif->alarm[i].sess_cnt -=1 : 0;
+               }
 
                if (weclosedfirst)
                   disconnect->self_disconnectc += 1;
@@ -1042,6 +1108,7 @@ disconnect_alarm_body(weclosedfirst, op,
                SASSERTX(disconnect->sessionc > 0);
 
                disconnect->sessionc -= 1;
+               uif ? uif->alarm[i].sess_cnt -=1 : 0;
                break;
 
             default:
@@ -1060,6 +1127,131 @@ disconnect_alarm_body(weclosedfirst, op,
       sockd_shmdt(alarm, SHMEM_MONITOR);
 }
 
+struct MemoryStruct {
+      char *memory;
+      size_t size;
+};
+
+static size_t
+WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp)
+{
+  size_t realsize = size * nmemb;
+  //fprintf(stdout, "########## size = %d, %s\n", (int)realsize, (char*)contents);
+  struct MemoryStruct *mem = (struct MemoryStruct *)userp;
+
+  mem->memory = realloc(mem->memory, mem->size + realsize + 1);
+  if(mem->memory == NULL) {
+    slog(LOG_ALARM, "not enough memory (realloc returned NULL)\n");
+    return 0;
+  }
+
+  memcpy(&(mem->memory[mem->size]), contents, realsize);
+  mem->size += realsize;
+  mem->memory[mem->size] = 0;
+
+  return realsize;
+}
+
+struct MemoryStruct chunk;
+int g_ip_ver = 0;
+
+int doreporter(void)
+{
+    char *url;
+    CURLcode return_code;
+    CURL *handle;
+    int ret = -1;
+    const char *post_str;
+    FILE *file;
+    json_object *ip_update;
+    json_object *status, *ver, *msg;
+    json_object *json_result = NULL;
+
+
+    return_code = curl_global_init(CURL_GLOBAL_ALL);
+    if (CURLE_OK != return_code) {
+        slog(LOG_DEBUG, "init libcurl failed.\n");
+        return;
+    }
+
+    handle = curl_easy_init();
+    if (!handle) {
+        slog(LOG_DEBUG, "get a curl handle failed.\n");
+        curl_global_cleanup();
+        return;
+    }
+
+    url = IP_PORT"/v1/iplist";
+    curl_easy_setopt(handle, CURLOPT_URL, url);
+
+    ip_update = json_object_new_object();
+    json_object_object_add(ip_update, "ver", json_object_new_int(g_ip_ver));
+
+    post_str = json_object_to_json_string(ip_update);
+    curl_easy_setopt(handle, CURLOPT_POSTFIELDS, post_str);
+    curl_easy_setopt(handle, CURLOPT_WRITEFUNCTION, &WriteMemoryCallback);
+    curl_easy_setopt(handle, CURLOPT_WRITEDATA, (void *)&chunk);
+    curl_easy_setopt(handle, CURLOPT_VERBOSE, 0L);
+
+    ret = curl_easy_perform(handle);
+    if(ret != CURLE_OK) {
+     	slog(LOG_ALARM, "curl_easy_perform() failed: %s\n", curl_easy_strerror(ret));
+    } else {
+        slog(LOG_ALARM, "########%lu bytes retrieved\n", (long)chunk.size);
+        file = fopen("/tmp/iplist", "w+");
+        if (!file) {
+            slog(LOG_ALARM, "Failed to open /tmp/iplist");
+            goto exit;
+        }
+
+        if (fwrite(chunk.memory, 1, chunk.size, file) != chunk.size) {
+            slog(LOG_ALARM, "Failed to wirte /tmp/iplist");
+            fclose(file);
+            goto exit;
+        }
+        fclose(file);
+
+        json_result = json_tokener_parse(chunk.memory);
+        if (json_result == NULL) {
+            slog(LOG_ALARM, "Failed to get json result\n");
+            goto exit;
+        }
+
+        if (!json_object_object_get_ex(json_result, "status", &status)
+            || json_object_get_type(status) != json_type_int) {
+            slog(LOG_ALARM, "Failed to get status\n");
+            goto exit;
+        }
+
+        json_object_object_get_ex(json_result, "msg", &msg);
+        json_object_object_get_ex(json_result, "ver", &ver);
+
+        slog(LOG_ALARM, "status: (%d),ip_version=%d, msg = %s \n",
+                json_object_get_int(status),
+                json_object_get_int(ver),
+                json_object_get_string(msg));
+
+        if (json_object_get_int(status) != 200) {
+            goto exit;
+        }
+
+        g_ip_ver = json_object_get_int(ver);
+    }
+
+exit:
+
+    if (chunk.memory) {
+        free(chunk.memory);
+    }
+
+    json_object_put(json_result);
+    json_object_put(ip_update);
+    curl_easy_cleanup(handle);
+    curl_global_cleanup();
+
+    return ret;
+}
+
 static void
 checkmonitors(void)
 {
@@ -1261,7 +1453,14 @@ checkmonitors(void)
                                &tnow);
             }
          }
-      }
+
+
+        char *url = IP_PORT"/v1/state/userinfo";
+		doupdate(url, ST_USERINFO, monitor);
+
+        url = IP_PORT"/v1/state/cardinfo";
+        doupdate(url, ST_CARDINFO, monitor);
+    }
 
 #define RESET_DISCONNECT(_alarm, _tnow)                                        \
 do {                                                                           \
@@ -1822,3 +2021,253 @@ do {
            (long)iface->alarm.disconnect.limit.seconds,
            iface->alarm.disconnect.limit.seconds == 1 ? "" : "s");
 }
+
+static int del_uid(monitor_t *monitor, uint32_t uid)
+{
+    user_info_t *uif = &monitor->mstats->object.monitor.user_info;
+    int i, j;
+    for (i = 0; i < uif->user_cnt; i++) {
+        if (uid == uif->alarm[i].uid) {
+     	   	slog(LOG_ALARM, "found it, user_cnt=%d, i=%d the uid=%x invalided, delete it\n", uif->user_cnt, i, uif->alarm[i].uid);
+            break;
+        }
+    }
+
+    for (j = i; j < uif->user_cnt-1; j++) {
+        memcpy(&uif->alarm[j], &uif->alarm[j+1], sizeof(uif->alarm[0]));
+    }
+
+    uif->user_cnt--;
+
+	return 0;
+}
+
+static size_t process_data(void *buffer, size_t size, size_t nmemb, void *user_p) {
+	json_object *json_result;
+	json_object *status;
+	json_object *msg;
+    json_object *logout;
+    int i;
+
+    slog(LOG_ALARM, "###%s\n", (char*)buffer);
+    monitor_t *monitor = (monitor_t *)user_p;
+	json_result = json_tokener_parse(buffer);
+	if (json_result == NULL) {
+        slog(LOG_ALARM, "Failed to get json result, buf=%s \n", (char *)buffer);
+		return 0;
+	}
+
+	if (!json_object_object_get_ex(json_result, "status", &status)
+		|| json_object_get_type(status) != json_type_int) {
+        slog(LOG_ALARM, "Failed to get status\n");
+		goto exit;
+	}
+
+    if (json_object_get_int(status) != 200) {
+        slog(LOG_ALARM, "status error: %d\n", json_object_get_int(status));
+        goto exit;
+    }
+
+	json_object_object_get_ex(json_result, "msg", &msg);
+    slog(LOG_ALARM, "status: (%d), msg = %s \n", json_object_get_int(status), json_object_get_string(msg));
+
+	json_object_object_get_ex(json_result, "logout_list", &logout);
+	if (!logout)
+		goto exit;
+
+    for(i = 0; i < json_object_array_length(logout); i++) {
+        json_object *jid = json_object_array_get_idx(logout, i);
+        uint32_t uid = json_object_get_int(jid);
+        slog(LOG_ALARM, "jid[%d]=%x tostring = %s \n", i, uid, json_object_to_json_string(jid));
+        del_uid(monitor, uid);
+    }
+
+
+exit:
+    json_object_put(json_result);
+
+	return 0;
+}
+
+int get_cardinfo(char* ifname, uint64_t *tx, uint64_t *rx)
+{
+	struct rtnl_link *link;
+	struct nl_sock *sk;
+    struct nl_cache *link_cache;
+	int err = 0;
+    char buf[64];
+
+	sk = nl_socket_alloc();
+    if (!sk) {
+         slog(LOG_DEBUG, "@@@@@@Failed to alloc netlink socket");
+         return -1;
+    }
+
+	if ((err = nl_connect(sk, NETLINK_ROUTE)) < 0) {
+		nl_perror(err, "Unable to connect socket");
+		return err;
+	}
+
+    if ((err = rtnl_link_alloc_cache(sk, AF_UNSPEC, &link_cache)) < 0) {
+        nl_perror(err, "Unable to allocate cache");
+        return err;
+    }
+
+    link = (struct rtnl_link *)rtnl_link_get_by_name(link_cache, ifname);
+
+    if (!link)
+        goto exit;
+
+    *rx = rtnl_link_get_stat(link, RTNL_LINK_RX_BYTES);
+	*tx = rtnl_link_get_stat(link, RTNL_LINK_TX_BYTES);
+    //slog(LOG_ALARM, "%s rx=%lu tx=%lu \n", (char *)rtnl_link_get_name(link), *rx, *tx);
+
+	rtnl_link_put(link);
+
+exit:
+    nl_cache_free(link_cache);
+	nl_socket_free(sk);
+
+	return 0;
+}
+
+int getipaddr(char *ifname, struct in_addr *addr)
+{
+    struct ifreq ifr;
+    int fd = 0;
+    fd = socket(AF_INET, SOCK_DGRAM, 0);
+    ifr.ifr_addr.sa_family = AF_INET;
+    strncpy(ifr.ifr_name, ifname,IFNAMSIZ-1);
+    ioctl(fd, SIOCGIFADDR, &ifr);
+    close(fd);
+    *addr = ((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr;
+    return 0;
+}
+
+static stats_info g_stat[5];
+static int doupdate(char *url, int type, monitor_t *monitor)
+{
+    int i;
+    const char *post_str;
+    CURLcode return_code;
+    json_object *conn_update = NULL;
+    json_object *netcard_update = NULL;
+    size_t conn_cnt = monitor->mstats->mstate.clients;
+    user_info_t *uif = &monitor->mstats->object.monitor.user_info;
+
+    return_code = curl_global_init(CURL_GLOBAL_ALL);
+    if (CURLE_OK != return_code) {
+        slog(LOG_DEBUG, "init libcurl failed.\n");
+        return;
+    }
+
+    CURL *handle = curl_easy_init();
+    if (!handle) {
+        slog(LOG_DEBUG, "get a easy handle failed.\n");
+        curl_global_cleanup();
+        return;
+    }
+
+    for (i = 0; i < sockscf.external.addrc; i++) {
+        snprintf(g_stat[i].ifname, IFNAMSIZ, "%s", sockscf.external.addrv[i].addr.ifname);
+        get_cardinfo(g_stat[i].ifname, &g_stat[i].last_tx, &g_stat[i].last_rx);
+        getipaddr(g_stat[i].ifname, &g_stat[i].addr);
+    }
+
+	switch (type) {
+		case ST_USERINFO: {
+                    int j, k;
+                    conn_update = json_object_new_object();
+                    json_object *user_list = json_object_new_array();
+                    slog(LOG_ALARM, "alarm ##########:uif->user_cnt=%d\n", uif->user_cnt);
+
+                    for (i = 0; i < uif->user_cnt; i++) {
+                        const char *dip_str;
+                        json_object *dip = json_object_new_array();
+                        json_object *user_info = json_object_new_object();
+                        json_object *sim_cards = json_object_new_array();
+                        json_object_object_add(user_info, "uid", json_object_new_int(uif->alarm[i].uid));
+
+                        json_object_object_add(user_info, "connect_count", json_object_new_int(uif->alarm[i].sess_cnt));
+                        json_object_object_add(user_info, "uploads",  json_object_new_int64(uif->alarm[i].uploads));
+                        json_object_object_add(user_info, "downloads", json_object_new_int64(uif->alarm[i].downloads));
+
+                        for (k = 0; k < sockscf.external.addrc; k++) {
+                            json_object *one_card = json_object_new_object();
+                            json_object_object_add(one_card, "ip", json_object_new_string(inet_ntoa(g_stat[k].addr)));
+                            json_object_object_add(one_card, "uploads",  json_object_new_int64(uif->alarm[k].uploads / 3));
+                            json_object_object_add(one_card, "downloads", json_object_new_int64(uif->alarm[k].downloads / 3));
+                            json_object_array_add(sim_cards, one_card);
+                        }
+
+                        json_object_object_add(user_info, "sim_cards", sim_cards);
+                        for (j = 0; j < 10 && uif->alarm[i].dip[j]; j++) {
+                            json_object_array_add(dip, json_object_new_int(uif->alarm[i].dip[j]));
+     	   	                dip_str = json_object_to_json_string(dip);
+                        }
+                        json_object_object_add(user_info, "dest_ip", dip);
+                        json_object_array_add(user_list, user_info);
+                    }
+
+                    json_object_object_add(conn_update, "user_list", user_list);
+     	   	        post_str = json_object_to_json_string(conn_update);
+     	   	        slog(LOG_ALARM, "post_buf: %s\n", post_str);
+
+			 }
+ 	       break;
+
+		case ST_CARDINFO: {
+                  int64_t dif_tx = 0;
+                  int64_t dif_rx = 0;
+                  netcard_update = json_object_new_object();
+                  json_object *card_list = json_object_new_array();
+                  for (i = 0; i < sockscf.external.addrc; i++) {
+                        dif_tx = g_stat[i].last_tx - g_stat[i].tx;
+                        dif_rx = g_stat[i].last_rx - g_stat[i].rx;
+     	   	            //slog(LOG_ALARM, "last_tx=%lu, tx=%lu, dif=%lu, last_rx=%lu, rx=%lu, dif=%lu\n",
+                        //       g_stat[i].last_tx, g_stat[i].tx, dif_tx,
+                        //      g_stat[i].last_rx, g_stat[i].rx, dif_rx);
+                        json_object *card = json_object_new_object();
+                        json_object_object_add(card, "ip", json_object_new_string(inet_ntoa(g_stat[i].addr)));
+                        if (g_stat[i].tx == 0 && g_stat[i].rx == 0) {
+                            json_object_object_add(card, "uploads", json_object_new_int64(0));
+                            json_object_object_add(card, "downloads", json_object_new_int64(0));
+                        } else {
+                            json_object_object_add(card, "uploads", json_object_new_int64(dif_tx));
+                            json_object_object_add(card, "downloads", json_object_new_int64(dif_rx));
+                        }
+
+                        json_object_array_add(card_list, card);
+                        g_stat[i].tx = g_stat[i].last_tx;
+                        g_stat[i].rx = g_stat[i].last_rx;
+                  }
+
+                  json_object_object_add(netcard_update, "connected_count", json_object_new_int(conn_cnt));
+                  json_object_object_add(netcard_update, "card_list", card_list);
+
+      	   	      post_str = json_object_to_json_string(netcard_update);
+     	   	      slog(LOG_ALARM, "postbuf: %s\n", post_str);
+			}
+  	          break;
+
+		default:
+     	  slog(LOG_ALARM, "unknown type = %d\n", type);
+	}
+
+    curl_easy_setopt(handle, CURLOPT_URL, url);
+ 	curl_easy_setopt(handle, CURLOPT_POSTFIELDS, post_str);
+ 	curl_easy_setopt(handle, CURLOPT_WRITEFUNCTION, &process_data);
+ 	curl_easy_setopt(handle, CURLOPT_WRITEDATA, monitor);
+ 	curl_easy_setopt(handle, CURLOPT_VERBOSE, 0L);
+ 	curl_easy_perform(handle);
+
+    if (type == ST_USERINFO) {
+        json_object_put(conn_update);
+    } else if (type == ST_CARDINFO) {
+        json_object_put(netcard_update);
+    }
+
+	curl_easy_cleanup(handle);
+	curl_global_cleanup();
+	return 0;
+}
diff -Npru dante-1.4.1/sockd/sockd.c /tmp/private_server/sockd/sockd.c
--- dante-1.4.1/sockd/sockd.c	2014-08-21 21:17:13.000000000 +0800
+++ /tmp/private_server/sockd/sockd.c	2016-07-11 15:28:01.000000000 +0800
@@ -516,7 +516,7 @@ moncontrol(1);
                                              ALARM_INTERNAL,
                                              &cinfo,
                                              strerror(errno),
-                                             sockscf.shmemfd);
+                                             sockscf.shmemfd, 0);
                }
                else { /* error with child? */
 #if HAVE_NEGOTIATE_PHASE
@@ -605,7 +605,7 @@ moncontrol(1);
                                           ALARM_INTERNAL,
                                           &cinfo,
                                           strerror(errno),
-                                          sockscf.shmemfd);
+                                          sockscf.shmemfd, 0);
                }
                else { /* error with target socket? */
                   if (saved_io.state.command != SOCKS_UDPASSOCIATE
@@ -618,7 +618,7 @@ moncontrol(1);
                                              ALARM_EXTERNAL,
                                              &cinfo,
                                              strerror(errno),
-                                             sockscf.shmemfd);
+                                             sockscf.shmemfd, 0);
                   }
 
 #if HAVE_NEGOTIATE_PHASE
@@ -767,7 +767,7 @@ moncontrol(1);
                                              ALARM_INTERNAL,
                                              &cinfo,
                                              strerror(errno),
-                                             sockscf.shmemfd);
+                                             sockscf.shmemfd, 0);
                   }
                   else {
 #if HAVE_NEGOTIATE_PHASE
@@ -923,7 +923,7 @@ moncontrol(1);
                                              ALARM_INTERNAL,
                                              &cinfo,
                                              strerror(errno),
-                                             sockscf.shmemfd);
+                                             sockscf.shmemfd, 0);
                   }
                   else {
                      if (io.state.command != SOCKS_UDPASSOCIATE
@@ -936,7 +936,7 @@ moncontrol(1);
                                                 ALARM_EXTERNAL,
                                                 &cinfo,
                                                 strerror(errno),
-                                                sockscf.shmemfd);
+                                                sockscf.shmemfd, 0);
                      }
 
 #if HAVE_NEGOTIATE_PHASE
@@ -1128,7 +1128,6 @@ moncontrol(1);
                            slog(LOG_DEBUG, "accept(2) of new client failed: %s",
                                 strerror(errno));
                         break;
-
                      case ENFILE:
                      case EMFILE:
                         swarn("could not accept new client");
@@ -1157,10 +1156,47 @@ moncontrol(1);
                gettimeofday_monotonic(&client.accepted);
                ++sockscf.stat.accepted;
 
-               slog(LOG_DEBUG, "accepted tcp client %s on address %s, fd %d",
+               int uuid=0;
+               int rc = -1;
+               int aa=sizeof(int);
+               rc = getsockopt(client.s, IPPROTO_TCP, MPTCP_AUTH_UUID, &uuid, &aa);
+               slog(LOG_ALARM, "########accepted tcp client %s on address %s, fd=%d, uuid=%x, rc=%d\n",
                     sockaddr2string(&client.from, astr, sizeof(astr)),
                     sockaddr2string(&sockscf.internal.addrv[i].addr, NULL, 0),
-                    sockscf.internal.addrv[i].s);
+                    sockscf.internal.addrv[i].s,
+                    uuid, rc);
+
+               monitor_t *monitor = sockscf.monitor;
+               monitor_stats_t *mstats;
+
+               rule_t rule;
+               bzero(&rule, sizeof(rule));
+               COPY_MONITORFIELDS(monitor, &rule);
+               sockd_shmat(&rule, SHMEM_MONITOR);
+               COPY_MONITORFIELDS(&rule, monitor);
+
+               if (monitor->mstats_shmid != 0) {
+                   SASSERTX(monitor->mstats != NULL);
+                   mstats = &monitor->mstats->object.monitor;
+                   int j;
+
+                   uint32_t user_cnt  =  mstats->user_info.user_cnt;
+                   for (j = 0; j < user_cnt; j++) {
+                       if(mstats->user_info.alarm[j].uid == uuid)
+                           break;
+                   }
+
+                   mstats->user_info.alarm[j].uid = uuid;
+                   mstats->user_info.alarm[j].sess_cnt += 1;
+                   if (j == user_cnt && j < SOCKD_MAX_CLIENTS) {
+                       mstats->user_info.user_cnt += 1;
+                   }
+
+                   slog(LOG_ALARM, "accept:######## user_cnt=%d, uid=%x,%d\n", user_cnt, uuid, uuid);
+               }
+
+               sockd_shmdt(&rule, SHMEM_MONITOR);
+               COPY_MONITORFIELDS(&rule, monitor);
 
                if ((child = nextchild(PROC_NEGOTIATE, SOCKS_TCP)) == NULL) {
                   log_clientdropped(&client.from);
diff -Npru dante-1.4.1/sockd/sockd_io.c /tmp/private_server/sockd/sockd_io.c
--- dante-1.4.1/sockd/sockd_io.c	2014-08-16 02:16:42.000000000 +0800
+++ /tmp/private_server/sockd/sockd_io.c	2016-07-11 15:30:05.000000000 +0800
@@ -945,7 +945,7 @@ run_io()
                                        ALARM_INTERNAL,
                                        &cinfo,
                                        r == 0 ? "EOF" : strerror(errno),
-                                       sockscf.shmemfd);
+                                       sockscf.shmemfd, io);
 
                   io->control.state.alarmdisconnectdone = 1;
                }
@@ -3320,7 +3320,7 @@ connectstatus(io, badfd)
                                     ALARM_INTERNAL,
                                     &cinfo,
                                     strerror(errno),
-                                    sockscf.shmemfd);
+                                    sockscf.shmemfd, io);
 
                io->src.state.alarmdisconnectdone = 1;
             }
@@ -3406,7 +3406,7 @@ connectstatus(io, badfd)
                            ALARM_EXTERNAL,
                            &cinfo,
                            strerror(errno),
-                           sockscf.shmemfd);
+                           sockscf.shmemfd, 0);
 
       io->dst.state.alarmdisconnectdone = 1;
    }
@@ -3449,7 +3449,7 @@ connectstatus(io, badfd)
 
 void
 io_update(timenow, bwused, i_read, i_written,
-          e_read, e_written, rule, packetrule, lock)
+          e_read, e_written, rule, packetrule, lock, fd)
    const struct timeval *timenow;
    const size_t bwused;
    const iocount_t *i_read;
@@ -3459,6 +3459,7 @@ io_update(timenow, bwused, i_read, i_wri
    rule_t *rule;
    rule_t *packetrule;
    const int lock;
+   const uint32_t fd;
 {
    const char *function = "io_update()";
    const iocount_t zero = { 0 };
@@ -3499,6 +3500,20 @@ io_update(timenow, bwused, i_read, i_wri
    SASSERTX(packetrule->mstats != NULL);
    monitor = &packetrule->mstats->object.monitor;
 
+   int i;
+   user_info_t *uif = &packetrule->mstats->object.monitor.user_info;
+   if (uif) {
+      int uuid = 0;
+      int rc = -1;
+      int aa = sizeof(int);
+      rc = getsockopt(fd, IPPROTO_TCP, MPTCP_AUTH_UUID, &uuid, &aa);
+      for (i = 0; i < uif->user_cnt; i++) {
+          if (uuid != 0 && uif->alarm[i].uid == uuid) {
+              break;
+          }
+      }
+   }
+
    socks_lock(sockscf.shmemfd, (off_t)packetrule->mstats_shmid, 1, 1, 1);
 
    MUNPROTECT_SHMEMHEADER(packetrule->mstats);
@@ -3517,6 +3532,7 @@ io_update(timenow, bwused, i_read, i_wri
       monitor->internal.alarm.data.send.lastio  = *timenow;
    }
 
+   uif ? uif->alarm[i].uploads += e_written->bytes : 0;
    if (monitor->external.alarm.data.recv.isconfigured
    && e_read != NULL
    && memcmp(&zero, e_read, sizeof(zero)) != 0) {
@@ -3531,6 +3547,7 @@ io_update(timenow, bwused, i_read, i_wri
       monitor->external.alarm.data.send.lastio  = *timenow;
    }
 
+   uif ? uif->alarm[i].downloads += i_written->bytes : 0;
    MPROTECT_SHMEMHEADER(packetrule->mstats);
 
    socks_unlock(sockscf.shmemfd, (off_t)packetrule->mstats_shmid, 1);
diff -Npru dante-1.4.1/sockd/sockd_io_misc.c /tmp/private_server/sockd/sockd_io_misc.c
--- dante-1.4.1/sockd/sockd_io_misc.c	2014-08-24 19:41:35.000000000 +0800
+++ /tmp/private_server/sockd/sockd_io_misc.c	2016-07-11 15:31:09.000000000 +0800
@@ -280,7 +280,7 @@ io_add_alarmdisconnects(io, reason)
                         sidestodisconnect,
                         &cinfo,
                         reason,
-                        sockscf.shmemfd);
+                        sockscf.shmemfd, io);
 
    if (sidestodisconnect & ALARM_INTERNAL)
       CONTROLIO(io)->state.alarmdisconnectdone  = 1;
diff -Npru dante-1.4.1/sockd/sockd_negotiate.c /tmp/private_server/sockd/sockd_negotiate.c
--- dante-1.4.1/sockd/sockd_negotiate.c	2014-08-22 14:23:12.000000000 +0800
+++ /tmp/private_server/sockd/sockd_negotiate.c	2016-07-11 15:31:45.000000000 +0800
@@ -660,7 +660,7 @@ run_negotiate()
                                        ALARM_INTERNAL,
                                        &cinfo,
                                        error,
-                                       sockscf.shmemfd);
+                                       sockscf.shmemfd, 0);
                }
 
                if (!erroriseof && neg->negstate.complete) {
@@ -1457,9 +1457,9 @@ recv_negotiate(void)
       if (CRULE_OR_HRULE(neg)->mstats_shmid != 0
       &&  CRULE_OR_HRULE(neg)->alarmsconfigured & ALARM_DISCONNECT)
         alarm_add_connect(CRULE_OR_HRULE(neg),
-                          ALARM_INTERNAL,
+                         ALARM_INTERNAL,
                           &cinfo,
-                          sockscf.shmemfd);
+                          sockscf.shmemfd, 0);
 
       neg->negstate.crule = &neg->crule;
 
diff -Npru dante-1.4.1/sockd/sockd_request.c /tmp/private_server/sockd/sockd_request.c
--- dante-1.4.1/sockd/sockd_request.c	2014-08-25 01:43:41.000000000 +0800
+++ /tmp/private_server/sockd/sockd_request.c	2016-07-11 15:53:51.000000000 +0800
@@ -425,7 +425,7 @@ run_request()
                                  ALARM_INTERNAL,
                                  &cinfo,
                                  strerror(errno),
-                                 sockscf.shmemfd);
+                                 sockscf.shmemfd, 0);
 
          SHMEM_UNUSE(rule, &cinfo, sockscf.shmemfd, SHMEM_ALL);
 
@@ -1606,7 +1606,7 @@ dorequest(mother, request, clientudpaddr
                                  ALARM_INTERNAL,
                                  &cinfo,
                                  strerror(errno),
-                                 sockscf.shmemfd);
+                                 sockscf.shmemfd, 0);
 
          permit = 0;
       }
@@ -1822,7 +1822,7 @@ dorequest(mother, request, clientudpaddr
             alarm_add_connect(SHMEMRULE(&io),
                               ALARM_EXTERNAL,
                               &cinfo,
-                              sockscf.shmemfd);
+                              sockscf.shmemfd, &io);
 
          io.reqinfo.command = (io.state.protocol == SOCKS_TCP ?
                                  SOCKD_FREESLOT_TCP : SOCKD_FREESLOT_UDP);
@@ -2417,7 +2417,7 @@ dorequest(mother, request, clientudpaddr
                                              ALARM_INTERNAL,
                                              &cinfo,
                                              strerror(errno),
-                                             sockscf.shmemfd);
+                                             sockscf.shmemfd, 0);
                   }
 
                   /* wait until here so we get the correct shmem-settings. */
@@ -2689,7 +2689,7 @@ dorequest(mother, request, clientudpaddr
                alarm_add_connect(&bindio.srule,
                                  ALARM_EXTERNAL,
                                  &cinfo,
-                                 sockscf.shmemfd);
+                                 sockscf.shmemfd, &io);
 
             if (bindio.state.extension.bind)
                /* add to list, client will query. */
@@ -2813,13 +2813,12 @@ dorequest(mother, request, clientudpaddr
                /*
                 * Connect(2) in progress or already completed, so add it now.
                 */
-               alarm_add_connect(SHMEMRULE(&io),
-                                 ALARM_EXTERNAL,
-                                 &cinfo,
-                                 sockscf.shmemfd);
+            alarm_add_connect(SHMEMRULE(&io),
+                              ALARM_EXTERNAL,
+                              &cinfo,
+                              sockscf.shmemfd, &io);
 
             io.src.state.isconnected = 1;
-
             SASSERTX(io.state.proxychain.proxyprotocol == PROXY_DIRECT);
             io.reqinfo.command = (io.state.protocol == SOCKS_TCP ?
                                        SOCKD_FREESLOT_TCP : SOCKD_FREESLOT_UDP);
diff -Npru dante-1.4.1/sockd/sockd_socket.c /tmp/private_server/sockd/sockd_socket.c
--- dante-1.4.1/sockd/sockd_socket.c	2014-08-16 02:16:44.000000000 +0800
+++ /tmp/private_server/sockd/sockd_socket.c	2016-07-06 15:06:02.000000000 +0800
@@ -347,6 +347,11 @@ bindinternal(protocol)
       if (setsockopt(l->s, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val)) != 0)
          swarn("%s: setsockopt(SO_REUSEADDR)", function);
 
+      int mptcp_enable = 1;
+      int rc = setsockopt(l->s, IPPROTO_TCP, MPTCP_AUTH_CLIENT_ENABLED, &mptcp_enable, sizeof(int));
+      if (rc != 0)
+         swarn("%s: setsockopt(MPTCP_AUTH_CLIENT_ENABLED)", function);
+
       if (listen(l->s, SOCKD_MAXCLIENTQUEUE) == -1) {
          swarn("%s: listen(%d) failed", function, SOCKD_MAXCLIENTQUEUE);
          return -1;
diff -Npru dante-1.4.1/sockd/sockd_tcp.c /tmp/private_server/sockd/sockd_tcp.c
--- dante-1.4.1/sockd/sockd_tcp.c	2014-08-22 14:23:12.000000000 +0800
+++ /tmp/private_server/sockd/sockd_tcp.c	2016-07-11 15:50:06.000000000 +0800
@@ -265,7 +265,7 @@ do {
                            alarmside,                                          \
                            &cinfo,                                             \
                            (iostatus) == IO_CLOSE ? "EOF" : strerror(errno),   \
-                           sockscf.shmemfd);                                   \
+                           sockscf.shmemfd, io);                               \
                                                                                \
       disconnectside->state.alarmdisconnectdone = 1;                           \
    }                                                                           \
@@ -471,7 +471,8 @@ do {
              isreversed ? &src_written : &dst_written,
              SHMEMRULE(io),
              SHMEMRULE(io),
-             sockscf.shmemfd);
+             sockscf.shmemfd,
+             io->src.s);
 
    slog(LOG_DEBUG, "%s: bwused = %ld", function, (unsigned long)bwused);
 
diff -Npru dante-1.4.1/sockd/sockd_udp.c /tmp/private_server/sockd/sockd_udp.c
--- dante-1.4.1/sockd/sockd_udp.c	2014-08-16 02:16:44.000000000 +0800
+++ /tmp/private_server/sockd/sockd_udp.c	2016-06-16 11:08:14.000000000 +0800
@@ -293,7 +293,8 @@ doio_udp(io, rset, badfd)
 
 #endif /* SOCKS_SERVER */
 
-                   sockscf.shmemfd);
+                   sockscf.shmemfd,
+                   0);
 
           /*
            * client2target will have changed dst to the object associated with
@@ -397,7 +398,7 @@ doio_udp(io, rset, badfd)
 
 #endif /* SOCKS_SERVER */
 
-                   sockscf.shmemfd);
+                   sockscf.shmemfd, 0);
       }
    }
 
